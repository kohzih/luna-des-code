/*====================================================================
	プログラム内で使用する構造体の宣言
=====================================================================*/

//----------------------------------------------------------
// メンバ変数の型をLONG型からdouble型に変更したポイント構造体
//----------------------------------------------------------
typedef struct tag_DoublePoint
{
	double x;
	double y;
} DPOINT;

//----------------------------------------------------------
// スプライトアニメーションを管理する構造体
//----------------------------------------------------------
typedef struct tag_SpAnime
{
	BYTE Anime;		  //スプライトのアニメーションパターン数
	BYTE *AnimePat;	  //アニメーションパターン配列のアドレス保存用
	BYTE *AnimeFrame; //アニメーション切り替えタイミング配列のアドレス保存用
	BYTE AnimeCnt;	  //現在表示するアニメーションパターン
	BYTE FrameCnt;	  //現在のアニメーションフレーム
	RECT SrcR;		  //転送元サーフェスの矩形範囲
	RECT DesR;		  //転送先サーフェスの矩形範囲
} SPANIME;

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

//----------------------------------------------------------
// 弾のアニメーションを管理する構造体
//----------------------------------------------------------
typedef struct tag_TamaAnime
{
	DWORD fTama;		 //弾の状態を表わすフラグ
	short Width;		 //弾の横幅
	short Height;		 //弾の縦幅
	DPOINT Mov;			 //弾の移動速度の入ったDPOINT構造体
	DPOINT dCdn;		 //弾の座標計算用のDPOINT構造体
	POINT Cdn;			 //弾の現在の画面座標の入ったPOINT構造体
	POINT MapCdn;		 //弾の現在の絶対座標の入ったPOINT構造体
	BYTE Anime;			 //スプライトのアニメーションパターン数
	BYTE AnimePat[10];	 //アニメーションパターン配列
	BYTE AnimeFrame[10]; //アニメーション切り替えタイミング配列
	BYTE AnimeCnt;		 //現在表示するアニメーションパターン
	BYTE FrameCnt;		 //現在のアニメーションフレーム
	RECT SrcR;			 //転送元サーフェスの矩形範囲
	RECT DesR;			 //転送先サーフェスの矩形範囲
} TAMA;

//----------------------------------------------------------
// 弾のアニメーションを管理する構造体2(角度、時間付き)
//----------------------------------------------------------
typedef struct tag_TamaAnime2
{
	DWORD fTama;		 //弾の状態を表わすフラグ
	short Width;		 //弾の横幅
	short Height;		 //弾の縦幅
	short Kakudo;		 //弾の発射角度
	short Time;			 //弾が発射されてからの経過時間
	DPOINT Mov;			 //弾の移動速度の入ったDPOINT構造体
	DPOINT dCdn;		 //弾の座標計算用のDPOINT構造体
	POINT Cdn;			 //弾の現在の画面座標の入ったPOINT構造体
	POINT MapCdn;		 //弾の現在の絶対座標の入ったPOINT構造体
	BYTE Anime;			 //スプライトのアニメーションパターン数
	BYTE AnimePat[10];	 //アニメーションパターン配列
	BYTE AnimeFrame[10]; //アニメーション切り替えタイミング配列
	BYTE AnimeCnt;		 //現在表示するアニメーションパターン
	BYTE FrameCnt;		 //現在のアニメーションフレーム
	RECT SrcR;			 //転送元サーフェスの矩形範囲
	RECT DesR;			 //転送先サーフェスの矩形範囲
} TAMA2;

//----------------------------------------------------------
// 弾のアニメーションを管理する構造体3(角度、時間、耐久力付き)
//----------------------------------------------------------
typedef struct tag_TamaAnime3
{
	DWORD fTama;			 //弾の状態を表わすフラグ
	short Width;			 //弾の横幅
	short Height;			 //弾の縦幅
	short Kakudo;			 //弾の発射角度
	short Time;				 //弾が発射されてからの経過時間
	short Shld;				 //弾破壊までの耐久力
	short ShldCnt;			 //弾残り耐久力のカウンタ
	DPOINT Mov;				 //弾の移動速度の入ったDPOINT構造体
	DPOINT dCdn;			 //弾の座標計算用のDPOINT構造体
	POINT Cdn;				 //弾の現在の画面座標の入ったPOINT構造体
	POINT MapCdn;			 //弾の現在の絶対座標の入ったPOINT構造体
	BYTE Anime;				 //スプライトのアニメーションパターン数
	BYTE AnimePat[10];		 //アニメーションパターン配列
	BYTE AnimeFrame[10];	 //アニメーション切り替えタイミング配列
	BYTE AnimeCnt;			 //現在表示するアニメーションパターン
	BYTE FrameCnt;			 //現在のアニメーションフレーム
	short BakuWidth;		 //弾の爆発シーン横幅
	short BakuHeight;		 //弾の爆発シーン縦幅
	BYTE BakuAnime;			 //爆発アニメーションパターン数
	BYTE BakuAnimePat[10];	 //爆発アニメーションパターン配列
	BYTE BakuAnimeFrame[10]; //爆発アニメーション切り替えタイミング配列
	BYTE BakuAnimeCnt;		 //現在表示する爆発アニメーションパターン
	BYTE BakuFrameCnt;		 //現在の爆発アニメーションフレーム
	RECT SrcR;				 //転送元サーフェスの矩形範囲
	RECT DesR;				 //転送先サーフェスの矩形範囲
} TAMA3;

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------
// TAMAを発射する場合の弾のステータスを管理する構造体
//---------------------------------------------------------------
typedef struct tag_TamaSts
{
	DWORD TTama;	//連続で発射できる弾の数
	DWORD WTama;	//弾を発射する間隔
	DWORD WTamaCnt; //弾発射までのカウンタ

	TAMA *tm; // TTama分確保した弾のステータスを管理するTAMA構造体配列のポインタ

} TAMAS;

//---------------------------------------------------------------
// TAMA2を発射する場合の弾のステータスを管理する構造体
//---------------------------------------------------------------
typedef struct tag_TamaStsKai
{
	DWORD TTama;	//連続で発射できる弾の数
	DWORD WTama;	//弾を発射する間隔
	DWORD WTamaCnt; //弾発射までのカウンタ

	TAMA2 *tm2; // TTama分確保した弾のステータスを管理するTAMA2構造体配列のポインタ

} TAMAS2;

//---------------------------------------------------------------
// TAMA3を発射する場合の弾のステータスを管理する構造体
//---------------------------------------------------------------
typedef struct tag_TamaStsKai2
{
	DWORD TTama;	//連続で発射できる弾の数
	DWORD WTama;	//弾を発射する間隔
	DWORD WTamaCnt; //弾発射までのカウンタ

	TAMA3 *tm3; // TTama分確保した弾のステータスを管理するTAMA3構造体配列のポインタ

} TAMAS3;

//------------------------------------------------------------------------------
// 別々のデータで初期化されたTAMA2を発射する場合の弾のステータスを管理する構造体
//------------------------------------------------------------------------------
typedef struct tag_TamaSts2
{
	DWORD TTama[2]; //連続で発射できる弾の数
	DWORD WTama;	//弾を発射する間隔
	DWORD WTamaCnt; //弾発射までのカウンタ

	TAMA2 *tm2[2]; // TTama分確保した弾のステータスを管理するTAMA構造体配列のポインタ
} TAMAS2_2;
